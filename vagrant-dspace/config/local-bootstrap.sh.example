#!/bin/bash

# local-bootstrap.sh.example is an example of a local bootstrap shell povisioner for Vagrant-DSpace.
# If you copy this file to local-bootstrap.sh, and modify it to match your needs, it will be run whenever you run "vagrant up".
#
# A few notes on this process:
# * "local-boostrap.sh" will always run AFTER DSpace is installed and Tomcat is started. So, you can use it to add test content to your DSpace (see example below)
# * "local.boostrap.sh" always runs as the "vagrant" user

# TWEAKABLES
# These variables are used in the example script below. Feel free to tweak if you wish to use this script as-is.

# Your primary DSpace admin (set to your admin person from local.yaml)
DSPACE_ADMIN="dspacedemo+admin@gmail.com"
# Where DSpace AIP content is stored. Any AIPs in this location will be ingested automatically (see sample code below)
CONTENT="/vagrant/content"
# Home of the default 'vagrant' user
HOME="/home/vagrant"
# DSpace Home directory
DSPACE_HOME="$HOME/dspace"
# DSpace Source directory
DSPACESRC="$DSPACE_HOME-src"
# Path to "dspace" commandline script
DSPACECMD="$DSPACE_HOME/bin/dspace"
# Tomcat service name
TOMCAT_SERVICE="tomcat7"

## START OFF BY CUSTOMIZING THE GIT CLONE ##
# add the fingerprint for github
# WARNING: Doesn't work on Windows as SSH Forwarding doesn't work in provisioning
#echo "Adding the fingerprint for github.com, so we don't get nagged later..."
#ssh -T -oStrictHostKeyChecking=no git@github.com

# set git to allways rebase when we pull (using sudo to run as the vagrant user, since this script runs as root)
git config --global --bool pull.rebase true

# set git to always use pretty colors
git config --global color.ui always

# and don't even try to get smart about converting line endings, that just pisses me off
git config --global core.autocrlf input

# and I don't need merge backups, really, I don't
git config --global --bool merge.keepbackups false

echo "and now setting up my preferences for my working copy... adding an upstream remote, PR refs..."
# add an upstream remote
cd $DSPACESRC && git remote add upstream git@github.com:DSpace/DSpace.git
# enable fetching of pull requests from upstream (this may or may not be common practice, but it's handy, why not try it out?)
#cd $DSPACESRC && git config --add remote.upstream.fetch +refs/pull/*/head:refs/remotes/upstream/pr/*

# now fetch everything so we're ready to go offline
# WARNING: Doesn't work on Windows as SSH Forwarding doesn't work in provisioning
#echo "getting ready for offline coding..."
#cd $DSPACESRC && git fetch --all

# run mvn install so our maven cache in ~/.m2/repository is current
# (NOTE: this will slow down the 'vagrant up' as it'll perform another full build of DSpace)
#cd $DSPACESRC && mvn install

# Git-smart is super helpful, especially for git newbies, and is worth installing just for smart-log
echo "installing git-smart"
sudo gem install git-smart > /dev/null

# dos2unix is useful for folks with Windows-hosts, as it lets you fix up line endings when needed
#echo "installing dos2unix"
#sudo apt-get install dos2unix -y > /dev/null

# htop is a better version of 'top'
#echo "installing htop"
#sudo apt-get install htop -y > /dev/null

## BASH inputrc customization
if [ -f "/vagrant/config/dotfiles/inputrc" ]; then
    echo "setting up BASH inputrc file"
    cp /vagrant/config/dotfiles/inputrc /home/vagrant/.inputrc
fi

# Vim customization

# copy vimrc if it exists
if [ -f "/vagrant/config/dotfiles/vimrc" ]; then
    echo "setting up .vimrc file"
    cp /vagrant/config/dotfiles/vimrc /home/vagrant/.vimrc
fi

# copy vim folder and its contents if they exists
if [ -d "/vagrant/config/dotfiles/vim" ]; then
    echo "copying .vim settings folder"
    cp -r /vagrant/config/dotfiles/vim /home/vagrant/.vim
    echo "creating .vimbackups folder"
    mkdir /home/vagrant/.vimbackups
fi

# MORE dotfiles

# copy GPG keys and trust files if they exist
if [ -d "/vagrant/config/dotfiles/gnupg" ]; then
   echo "copying GPG keys and trust files..."
   cp -r /vagrant/config/dotfiles/gnupg /home/vagrant/.gnupg
fi

# copy maven settings.xml if it exists
if [ -f "/vagrant/config/dotfiles/maven_settings.xml" ]; then
   echo "copying Maven settings.xml file..."
   cp /vagrant/config/dotfiles/maven_settings.xml /home/vagrant/.m2/settings.xml
fi

# NOTE: if you want more dotfiles installed, you'll need to specifically copy them, following
# the examples above. We do this so that we only install files with intention, and don't
# blindly install a config file. We recommend being cautious and only attempt to copy
# files and directories if they exist (use the -f and -d tests).


## Now Add DSpace Content ##

# NOTE: this will only work if the SITE AIP file is named the same as the handle prefix
# configured for this Vagrant-DSpace workspace (check vagrant.properties in dspace-src),
# e.g. SITE@10673-0.zip (if handle prefix is "10673").
# By default it's the same prefix as the demo.dspace.org server, as DSpace Committers have
# ready access to the AIP files used to populate demo.dspace.org, and we can use
# Vagrant-DSpace to create more such AIPs. Demo's handle prefix is 10673.

SITE_AIP=`echo $CONTENT/SITE@* | cut -f1 -d' '`
if [ -n "$SITE_AIP" ]; then
    echo "Recursively installing content from AIPs at $CONTENT (starting with $SITE_AIP AIP)"

    # let's get the handle from this site AIP's name
    AIP_NAME="${SITE_AIP##*/}"
    HANDLE=`echo $AIP_NAME | cut -f2 -d'@'`
    HANDLE=${HANDLE/-/\/}
    HANDLE=`echo $HANDLE | cut -f1 -d'.'`

    # --------------------------------------
    # Stop Tomcat
    # --------------------------------------
    sudo service $TOMCAT_SERVICE stop
    echo ""

    # ----------------------------------------
    # Import DSpace AIPs from /vagrant/content (starting with the one named "SITE@[handle].zip")
    # ----------------------------------------
    $DSPACECMD packager -u -r -a -f -t AIP -e $DSPACE_ADMIN -i $HANDLE -o skipIfParentMissing=true -o createMetadataFields=true $SITE_AIP

    # ----------------------------------------------
    # Re-index content -- only necessary for DSpace 3.x and earlier
    # ----------------------------------------------
    #echo "Reindexing all content in DSpace..."
    #/home/vagrant/dspace/bin/dspace index-init
    #echo ""

    # --------------------------------------
    # Start up Tomcat
    # --------------------------------------
    sudo service $TOMCAT_SERVICE start
    echo ""

    # --------------------------------------
    # Step 8 : Update Discovery indexes
    # --------------------------------------
    echo "Rebuilding Discovery (Solr) Indexes..."
    # Note: the '-b' option tells Discovery to perform a full reindex (wiping out the existing index first)
    $DSPACECMD index-discovery -b

    echo ""
    echo ""
    echo "SUCCESS! batch load of AIP content is now complete!"
fi
